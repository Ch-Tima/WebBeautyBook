{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet ResetPasswordComponent = class ResetPasswordComponent {\n  constructor(auth, formBuilder, router, activityRoute) {\n    this.auth = auth;\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.activityRoute = activityRoute;\n    this.mForm = new FormGroup({});\n    this.lastErrorMessage = \"\";\n    this.mForm = formBuilder.group({\n      email: new FormControl('', [Validators.required]),\n      token: new FormControl('', [Validators.required]),\n      password: new FormControl('', [Validators.required, Validators.minLength(6)]),\n      confirmPassword: new FormControl('', [Validators.required])\n    }, {\n      validator: CompareValidator(\"password\", \"confirmPassword\")\n    });\n  }\n  ngOnInit() {\n    //Pulling a token and an email address from a URL\n    var token = this.activityRoute.snapshot.queryParams[\"token\"];\n    var email = this.activityRoute.snapshot.queryParams[\"email\"];\n    //If token or email address not found, redirect to home page\n    if (token == undefined || email == undefined) this.router.navigate([\"/\"]);\n    //Add a token and an email to the form\n    this.mForm.controls['token'].setValue(token);\n    this.mForm.controls['email'].setValue(email);\n  }\n  onSubmit() {\n    this.auth.ResetPassword(this.mForm.value).subscribe(result => {\n      this.router.navigate([\"/login\"]);\n    }, error => {\n      //If there is an error in the model, then a list of errors will come\n      if (error.error.errors != undefined && Object.values(error.error.errors)[0] != undefined) {\n        this.lastErrorMessage = Object.values(error.error.errors)[0] + \"\";\n      } else {\n        //Just an error line\n        this.lastErrorMessage = error.error;\n      }\n    });\n  }\n};\nResetPasswordComponent = __decorate([Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.css']\n})], ResetPasswordComponent);\nexport { ResetPasswordComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAOlC,IAAMC,sBAAsB,GAA5B,MAAMA,sBAAsB;EAIjCC,YAAoBC,IAAiB,EAAUC,WAAwB,EAC7DC,MAAc,EAAUC,aAA6B;IAD3C,SAAI,GAAJH,IAAI;IAAuB,gBAAW,GAAXC,WAAW;IAChD,WAAM,GAANC,MAAM;IAAkB,kBAAa,GAAbC,aAAa;IAJ/C,UAAK,GAAc,IAAIC,SAAS,CAAC,EAAE,CAAC;IACpC,qBAAgB,GAAW,EAAE;IAK3B,IAAI,CAACC,KAAK,GAAGJ,WAAW,CAACK,KAAK,CAAC;MAC7BC,KAAK,EAAE,IAAIC,WAAW,CAAC,EAAE,EAAE,CAACC,UAAU,CAACC,QAAQ,CAAC,CAAC;MACjDC,KAAK,EAAE,IAAIH,WAAW,CAAC,EAAE,EAAE,CAACC,UAAU,CAACC,QAAQ,CAAC,CAAC;MACjDE,QAAQ,EAAE,IAAIJ,WAAW,CAAC,EAAE,EAAE,CAACC,UAAU,CAACC,QAAQ,EAAED,UAAU,CAACI,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MAC7EC,eAAe,EAAE,IAAIN,WAAW,CAAC,EAAE,EAAE,CAACC,UAAU,CAACC,QAAQ,CAAC;KAC3D,EAAE;MACDK,SAAS,EAAEC,gBAAgB,CAAC,UAAU,EAAE,iBAAiB;KAC1D,CAAC;EACJ;EAEAC,QAAQ;IACN;IACA,IAAIN,KAAK,GAAG,IAAI,CAACR,aAAa,CAACe,QAAQ,CAACC,WAAW,CAAC,OAAO,CAAC;IAC5D,IAAIZ,KAAK,GAAG,IAAI,CAACJ,aAAa,CAACe,QAAQ,CAACC,WAAW,CAAC,OAAO,CAAC;IAE5D;IACA,IAAGR,KAAK,IAAIS,SAAS,IAAIb,KAAK,IAAIa,SAAS,EAAE,IAAI,CAAClB,MAAM,CAACmB,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;IAExE;IACA,IAAI,CAAChB,KAAK,CAACiB,QAAQ,CAAC,OAAO,CAAC,CAACC,QAAQ,CAACZ,KAAK,CAAC;IAC5C,IAAI,CAACN,KAAK,CAACiB,QAAQ,CAAC,OAAO,CAAC,CAACC,QAAQ,CAAChB,KAAK,CAAC;EAC9C;EAEAiB,QAAQ;IACN,IAAI,CAACxB,IAAI,CAACyB,aAAa,CAAC,IAAI,CAACpB,KAAK,CAACqB,KAAK,CAAC,CACtCC,SAAS,CAACC,MAAM,IAAG;MAClB,IAAI,CAAC1B,MAAM,CAACmB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC,EAAEQ,KAAK,IAAG;MACT;MACA,IAAGA,KAAK,CAACA,KAAK,CAACC,MAAM,IAAIV,SAAS,IAAIW,MAAM,CAACC,MAAM,CAACH,KAAK,CAACA,KAAK,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAIV,SAAS,EAAC;QACtF,IAAI,CAACa,gBAAgB,GAAGF,MAAM,CAACC,MAAM,CAACH,KAAK,CAACA,KAAK,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE;OAClE,MAAI;QAAC;QACJ,IAAI,CAACG,gBAAgB,GAAGJ,KAAK,CAACA,KAAK;;IAEvC,CAAC,CAAC;EACN;CACD;AA3CY/B,sBAAsB,eALlCD,SAAS,CAAC;EACTqC,QAAQ,EAAE,oBAAoB;EAC9BC,WAAW,EAAE,iCAAiC;EAC9CC,SAAS,EAAE,CAAC,gCAAgC;CAC7C,CAAC,GACWtC,sBAAsB,CA2ClC;SA3CYA,sBAAsB","names":["Component","ResetPasswordComponent","constructor","auth","formBuilder","router","activityRoute","FormGroup","mForm","group","email","FormControl","Validators","required","token","password","minLength","confirmPassword","validator","CompareValidator","ngOnInit","snapshot","queryParams","undefined","navigate","controls","setValue","onSubmit","ResetPassword","value","subscribe","result","error","errors","Object","values","lastErrorMessage","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\chizh\\source\\repos\\WebBeautyBook\\WebBeautyBook\\ClientApp\\src\\app\\auth\\reset-password\\reset-password.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.css']\n})\nexport class ResetPasswordComponent {\n  mForm: FormGroup = new FormGroup({});\n  lastErrorMessage: string = \"\";\n\n  constructor(private auth: AuthService, private formBuilder: FormBuilder, \n    private router: Router, private activityRoute: ActivatedRoute)\n  {\n    this.mForm = formBuilder.group({\n      email: new FormControl('', [Validators.required]),\n      token: new FormControl('', [Validators.required]),\n      password: new FormControl('', [Validators.required, Validators.minLength(6)]),\n      confirmPassword: new FormControl('', [Validators.required]),\n    }, {\n      validator: CompareValidator(\"password\", \"confirmPassword\")\n    });\n  }\n\n  ngOnInit(): void {\n    //Pulling a token and an email address from a URL\n    var token = this.activityRoute.snapshot.queryParams[\"token\"];\n    var email = this.activityRoute.snapshot.queryParams[\"email\"];\n\n    //If token or email address not found, redirect to home page\n    if(token == undefined || email == undefined) this.router.navigate([\"/\"]);\n\n    //Add a token and an email to the form\n    this.mForm.controls['token'].setValue(token);\n    this.mForm.controls['email'].setValue(email);\n  }\n\n  onSubmit() {\n    this.auth.ResetPassword(this.mForm.value)\n      .subscribe(result => {\n        this.router.navigate([\"/login\"]);\n      }, error => {\n        //If there is an error in the model, then a list of errors will come\n        if(error.error.errors != undefined && Object.values(error.error.errors)[0] != undefined){\n          this.lastErrorMessage = Object.values(error.error.errors)[0] + \"\";\n        }else{//Just an error line\n          this.lastErrorMessage = error.error;\n        }\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}