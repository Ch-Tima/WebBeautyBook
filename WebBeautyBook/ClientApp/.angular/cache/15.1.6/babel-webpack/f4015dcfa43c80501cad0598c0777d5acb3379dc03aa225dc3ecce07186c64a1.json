{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { CompareValidator } from 'src/app/validators/CompareValidator';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/auth.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction ResetPasswordComponent_div_9_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 10);\n    i0.ɵɵtext(1, \"Password is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_div_9_small_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 10);\n    i0.ɵɵtext(1, \"The minimum Password length is 6 characters.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, ResetPasswordComponent_div_9_small_1_Template, 2, 0, \"small\", 9);\n    i0.ɵɵtemplate(2, ResetPasswordComponent_div_9_small_2_Template, 2, 0, \"small\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.mForm.controls[\"password\"].errors[\"required\"] != undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.mForm.controls[\"password\"].errors[\"maxlength\"] != undefined || ctx_r0.mForm.controls[\"password\"].errors[\"minlength\"] != undefined);\n  }\n}\nfunction ResetPasswordComponent_div_14_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 10);\n    i0.ɵɵtext(1, \"ConfirmPassword and Password do not match.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, ResetPasswordComponent_div_14_small_1_Template, 2, 0, \"small\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.mForm.controls[\"confirmPassword\"].errors[\"confirmedValidator\"] != undefined);\n  }\n}\nfunction ResetPasswordComponent_p_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r2.lastErrorMessage);\n  }\n}\nfunction ResetPasswordComponent_button_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 11);\n    i0.ɵɵtext(1, \"Send\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_button_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 12);\n    i0.ɵɵtext(1, \"Send\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class ResetPasswordComponent {\n  constructor(auth, formBuilder, router, activityRoute) {\n    this.auth = auth;\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.activityRoute = activityRoute;\n    this.mForm = new FormGroup({});\n    this.lastErrorMessage = \"\";\n    this.mForm = formBuilder.group({\n      email: new FormControl('', [Validators.required]),\n      token: new FormControl('', [Validators.required]),\n      password: new FormControl('', [Validators.required, Validators.minLength(6)]),\n      confirmPassword: new FormControl('', [Validators.required])\n    }, {\n      validator: CompareValidator(\"password\", \"confirmPassword\")\n    });\n  }\n  ngOnInit() {\n    //Pulling a token and an email address from a URL\n    var token = this.activityRoute.snapshot.queryParams[\"token\"];\n    var email = this.activityRoute.snapshot.queryParams[\"email\"];\n    //If token or email address not found, redirect to home page\n    if (token == undefined || email == undefined) this.router.navigate([\"/\"]);\n    //Add a token and an email to the form\n    this.mForm.controls['token'].setValue(token);\n    this.mForm.controls['email'].setValue(email);\n  }\n  onSubmit() {\n    this.auth.ResetPassword(this.mForm.value).subscribe(result => {\n      this.router.navigate([\"/login\"]);\n    }, error => {\n      //If there is an error in the model, then a list of errors will come\n      if (error.error.errors != undefined && Object.values(error.error.errors)[0] != undefined) {\n        this.lastErrorMessage = Object.values(error.error.errors)[0] + \"\";\n      } else {\n        //Just an error line\n        this.lastErrorMessage = error.error;\n      }\n    });\n  }\n}\nResetPasswordComponent.ɵfac = function ResetPasswordComponent_Factory(t) {\n  return new (t || ResetPasswordComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute));\n};\nResetPasswordComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ResetPasswordComponent,\n  selectors: [[\"app-reset-password\"]],\n  decls: 18,\n  vars: 6,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [\"for\", \"password\"], [\"formControlName\", \"password\", \"type\", \"password\"], [4, \"ngIf\"], [\"for\", \"confirmPassword\"], [\"formControlName\", \"confirmPassword\", \"type\", \"password\"], [\"style\", \"color: red;\", 4, \"ngIf\"], [\"class\", \"btn btn-primary\", \"type\", \"submit\", \"disabled\", \"\", 4, \"ngIf\"], [\"class\", \"btn btn-primary\", \"type\", \"submit\", 4, \"ngIf\"], [\"style\", \"color:red\", 4, \"ngIf\"], [2, \"color\", \"red\"], [\"type\", \"submit\", \"disabled\", \"\", 1, \"btn\", \"btn-primary\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"]],\n  template: function ResetPasswordComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\")(1, \"h3\");\n      i0.ɵɵtext(2, \"reset password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function ResetPasswordComponent_Template_form_ngSubmit_3_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(4, \"div\")(5, \"div\")(6, \"label\", 1);\n      i0.ɵɵtext(7, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"input\", 2);\n      i0.ɵɵtemplate(9, ResetPasswordComponent_div_9_Template, 3, 2, \"div\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"div\")(11, \"label\", 4);\n      i0.ɵɵtext(12, \"ConfirmPassword\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(13, \"input\", 5);\n      i0.ɵɵtemplate(14, ResetPasswordComponent_div_14_Template, 2, 1, \"div\", 3);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(15, ResetPasswordComponent_p_15_Template, 2, 1, \"p\", 6);\n      i0.ɵɵtemplate(16, ResetPasswordComponent_button_16_Template, 2, 0, \"button\", 7);\n      i0.ɵɵtemplate(17, ResetPasswordComponent_button_17_Template, 2, 0, \"button\", 8);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formGroup\", ctx.mForm);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", ctx.mForm.controls[\"password\"].errors != null && ctx.mForm.controls[\"password\"].touched);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.mForm.controls[\"confirmPassword\"].errors != null && ctx.mForm.controls[\"confirmPassword\"].touched);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.lastErrorMessage != \"\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.mForm.valid);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.mForm.valid);\n    }\n  },\n  dependencies: [i4.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["FormControl","FormGroup","Validators","CompareValidator","i0","ResetPasswordComponent","constructor","auth","formBuilder","router","activityRoute","mForm","group","email","required","token","password","minLength","confirmPassword","validator","ngOnInit","snapshot","queryParams","undefined","navigate","controls","setValue","onSubmit","ResetPassword","value","subscribe","result","error","errors","Object","values","lastErrorMessage","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\chizh\\source\\repos\\WebBeautyBook\\WebBeautyBook\\ClientApp\\src\\app\\auth\\reset-password\\reset-password.component.ts","C:\\Users\\chizh\\source\\repos\\WebBeautyBook\\WebBeautyBook\\ClientApp\\src\\app\\auth\\reset-password\\reset-password.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { CompareValidator } from 'src/app/validators/CompareValidator';\n\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.css']\n})\nexport class ResetPasswordComponent implements OnInit {\n  mForm: FormGroup = new FormGroup({});\n  lastErrorMessage: string = \"\";\n\n  constructor(private auth: AuthService, private formBuilder: FormBuilder, \n    private router: Router, private activityRoute: ActivatedRoute)\n  {\n    this.mForm = formBuilder.group({\n      email: new FormControl('', [Validators.required]),\n      token: new FormControl('', [Validators.required]),\n      password: new FormControl('', [Validators.required, Validators.minLength(6)]),\n      confirmPassword: new FormControl('', [Validators.required]),\n    }, {\n      validator: CompareValidator(\"password\", \"confirmPassword\")\n    });\n  }\n\n  ngOnInit(): void {\n    //Pulling a token and an email address from a URL\n    var token = this.activityRoute.snapshot.queryParams[\"token\"];\n    var email = this.activityRoute.snapshot.queryParams[\"email\"];\n\n    //If token or email address not found, redirect to home page\n    if(token == undefined || email == undefined) this.router.navigate([\"/\"]);\n\n    //Add a token and an email to the form\n    this.mForm.controls['token'].setValue(token);\n    this.mForm.controls['email'].setValue(email);\n  }\n\n  onSubmit() {\n    this.auth.ResetPassword(this.mForm.value)\n      .subscribe(result => {\n        this.router.navigate([\"/login\"]);\n      }, error => {\n        //If there is an error in the model, then a list of errors will come\n        if(error.error.errors != undefined && Object.values(error.error.errors)[0] != undefined){\n          this.lastErrorMessage = Object.values(error.error.errors)[0] + \"\";\n        }else{//Just an error line\n          this.lastErrorMessage = error.error;\n        }\n      });\n  }\n}\n","<div>\n    <h3>reset password</h3>\n    <form [formGroup]=\"mForm\" (ngSubmit)=\"onSubmit()\">\n      <div>\n  \n        <div>\n            <label for=\"password\">Password</label>\n            <input formControlName=\"password\" type=\"password\">\n            <div *ngIf=\"mForm.controls['password'].errors != null && mForm.controls['password'].touched\">\n              <small style=\"color:red\" *ngIf=\"mForm.controls['password'].errors['required'] != undefined\">Password is required.</small>\n              <small style=\"color:red\" *ngIf=\"mForm.controls['password'].errors['maxlength'] != undefined || mForm.controls['password'].errors['minlength'] != undefined\">The minimum Password length is 6 characters.</small>\n            </div>\n          </div>\n    \n          <div>\n            <label for=\"confirmPassword\">ConfirmPassword</label>\n            <input formControlName=\"confirmPassword\" type=\"password\">\n            <div *ngIf=\"mForm.controls['confirmPassword'].errors != null && mForm.controls['confirmPassword'].touched\">\n              <small style=\"color:red\" *ngIf=\"mForm.controls['confirmPassword'].errors['confirmedValidator'] != undefined\">ConfirmPassword and Password do not match.</small>\n            </div>\n          </div>\n  \n\n      </div>\n  \n      <p *ngIf=\"lastErrorMessage != ''\" style=\"color: red;\">{{lastErrorMessage}}</p>\n  \n      <button *ngIf=\"!mForm.valid\" class=\"btn btn-primary\" type=\"submit\" disabled>Send</button>\n      <button *ngIf=\"mForm.valid\" class=\"btn btn-primary\" type=\"submit\">Send</button>\n    </form>\n  </div>\n  \n  \n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}