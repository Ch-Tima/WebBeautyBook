{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { UserDataModel } from \"../models/UserDataModel\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport const TOKEN = \"token\";\nexport const EXPRARTION_TOKEN = \"expiration-token\";\nexport const USER_DATA = \"user-data\";\nexport class AuthService {\n  constructor(http, baseUrl) {\n    this.http = http;\n    this.baseUrl = baseUrl;\n    this.baseUrl = baseUrl;\n  }\n  /**API request login*/\n  login(data) {\n    return this.http.post(this.baseUrl + \"api/Auth/login\", data);\n  }\n  /**API request register*/\n  register(data) {\n    return this.http.post(this.baseUrl + \"api/Auth/register\", data);\n  }\n  /**API request forgotPassword*/\n  ForgotPassword(emailJsonString) {\n    return this.http.post(this.baseUrl + \"api/Auth/forgotPassword\", JSON.stringify(emailJsonString), {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    });\n  }\n  /**API request resetPassword*/\n  ResetPassword(data) {\n    return this.http.post(this.baseUrl + \"api/Auth/resetPassword\", data);\n  }\n  /**API request emailConfirmation*/\n  emailConfirmation(token, email) {\n    return this.http.get(this.baseUrl + \"api/Auth/confirmEmail\", {\n      params: {\n        token: token,\n        email: email\n      }\n    });\n  }\n  /**API request registerOwnCompany (OWN_COMPANY)*/\n  registerOwnCompany(data) {\n    var userData = this.getLocalUserDate();\n    if (userData != null && userData.roles.filter(role => role == 'admin').length == 0) return null;\n    return this.http.post(this.baseUrl + \"api/Auth/registrationViaAdmin\", data, {\n      headers: new HttpHeaders().set(\"Authorization\", \"Bearer \" + localStorage.getItem(TOKEN))\n    });\n  }\n  /**API request registerOwnCompany (OWN_COMPANY)*/\n  registerWorker(data) {\n    var userData = this.getLocalUserDate();\n    if (userData != null && userData.roles.filter(role => role == 'own_company').length == 0) return null;\n    return this.http.post(this.baseUrl + \"api/Auth/registrationViaCompany\", data, {\n      headers: new HttpHeaders().set(\"Authorization\", \"Bearer \" + localStorage.getItem(TOKEN))\n    });\n  }\n  /**API request getUserData*/\n  getUserData() {\n    return this.http.get(this.baseUrl + \"/api/User\", {\n      headers: new HttpHeaders().set(\"Authorization\", \"Bearer \" + localStorage.getItem(TOKEN))\n    });\n  }\n  /**\r\n   * Reads user data from \"localStorage\"\r\n   * @returns UserDataModel or null\r\n  */\n  getLocalUserDate() {\n    var json_data = localStorage.getItem(USER_DATA);\n    if (json_data != null) {\n      var userSubject = new BehaviorSubject(JSON.parse(json_data));\n      return userSubject.value;\n    } else {\n      return null;\n    }\n  }\n  /**\r\n   * Remove all dates from \"localStorage\".\r\n   */\n  signOut() {\n    localStorage.clear();\n    window.location.replace(\"/\");\n  }\n  /**\r\n   * Checks for the presence of a token.\r\n   * @returns true if the token exists, or false if the token does not exist.\r\n   */\n  hasToken() {\n    var token = localStorage.getItem(TOKEN);\n    if (token != null) {\n      return true;\n    }\n    return false;\n  }\n  /**\r\n   * Store the token and the expired in \"localStorage\".\r\n   * @param token\r\n   * @param expration\r\n   */\n  saveToken(token, expration) {\n    localStorage.setItem(TOKEN, token);\n    localStorage.setItem(EXPRARTION_TOKEN, expration);\n  }\n  /**\r\n   * Stores user data in \"localStorage\"\r\n   * @param user - user data\r\n   */\n  saveUserData(user) {\n    localStorage.setItem(USER_DATA, JSON.stringify(user));\n  }\n  /**\r\n   *\r\n   * @returns HttpHeaders with Authorization Token\r\n   */\n  getHeadersWithToken() {\n    return new HttpHeaders().set(\"Authorization\", \"Bearer \" + localStorage.getItem(TOKEN));\n  }\n  getUserFromLocalStorage() {\n    var jsonObj = localStorage.getItem(USER_DATA);\n    if (jsonObj == null) return null;\n    var result = Object.assign(new UserDataModel(), jsonObj);\n    return result;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","BehaviorSubject","UserDataModel","TOKEN","EXPRARTION_TOKEN","USER_DATA","AuthService","constructor","http","baseUrl","login","data","post","register","ForgotPassword","emailJsonString","JSON","stringify","headers","ResetPassword","emailConfirmation","token","email","get","params","registerOwnCompany","userData","getLocalUserDate","roles","filter","role","length","set","localStorage","getItem","registerWorker","getUserData","json_data","userSubject","parse","value","signOut","clear","window","location","replace","hasToken","saveToken","expration","setItem","saveUserData","user","getHeadersWithToken","getUserFromLocalStorage","jsonObj","result","Object","assign","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\chizh\\source\\repos\\WebBeautyBook\\WebBeautyBook\\ClientApp\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { RegisterModel } from '../models/RegisterModel';\r\nimport { LoginModel } from '../models/LoginModel';\r\nimport { JWT } from '../models/JWT ';\r\nimport { ResetPasswordModel } from '../models/ResetPasswordModel';\r\nimport { UserDataModel } from \"../models/UserDataModel\";\r\n\r\nexport const TOKEN: string = \"token\"\r\nexport const EXPRARTION_TOKEN: string = \"expiration-token\"\r\nexport const USER_DATA: string = \"user-data\"\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\n  constructor(private http: HttpClient, @Inject('BASE_URL') private baseUrl: string) {\r\n    this.baseUrl = baseUrl;\r\n  }\r\n  /**API request login*/\r\n  public login(data: LoginModel): Observable<JWT> {\r\n    return this.http.post<JWT>(this.baseUrl + \"api/Auth/login\", data);\r\n  }\r\n  /**API request register*/\r\n  public register(data: RegisterModel): Observable<any> {\r\n    return this.http.post<any>(this.baseUrl + \"api/Auth/register\", data);\r\n  }\r\n\r\n  /**API request forgotPassword*/\r\n  public ForgotPassword(emailJsonString:string): Observable<string> {\r\n    return this.http.post<any>(this.baseUrl + \"api/Auth/forgotPassword\", JSON.stringify(emailJsonString), {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n      })\r\n    });\r\n  }\r\n\r\n  /**API request resetPassword*/\r\n  public ResetPassword(data: ResetPasswordModel): Observable<any>{\r\n    return this.http.post<any>(this.baseUrl + \"api/Auth/resetPassword\", data);\r\n  }\r\n\r\n  /**API request emailConfirmation*/\r\n  public emailConfirmation(token: string, email: string): Observable<any>{\r\n    return this.http.get(this.baseUrl + \"api/Auth/confirmEmail\", {\r\n      params : {\r\n        token: token,\r\n        email: email\r\n      }\r\n    });\r\n  }\r\n  \r\n  /**API request registerOwnCompany (OWN_COMPANY)*/\r\n  public registerOwnCompany(data: RegisterModel): Observable<UserDataModel> | null {\r\n    var userData = this.getLocalUserDate();\r\n    if(userData != null && userData.roles.filter(role => role == 'admin').length == 0)\r\n      return null;\r\n    return this.http.post<any>(this.baseUrl + \"api/Auth/registrationViaAdmin\", data, {\r\n      headers: new HttpHeaders().set(\"Authorization\", \"Bearer \" + localStorage.getItem(TOKEN))\r\n    });\r\n  }\r\n\r\n  /**API request registerOwnCompany (OWN_COMPANY)*/\r\n  public registerWorker(data: RegisterModel): Observable<UserDataModel> | null {\r\n    var userData = this.getLocalUserDate();\r\n    if(userData != null && userData.roles.filter(role => role == 'own_company').length == 0)\r\n      return null;\r\n    return this.http.post<any>(this.baseUrl + \"api/Auth/registrationViaCompany\", data, {\r\n      headers: new HttpHeaders().set(\"Authorization\", \"Bearer \" + localStorage.getItem(TOKEN))\r\n    });\r\n  }\r\n\r\n  /**API request getUserData*/\r\n  public getUserData(): Observable<UserDataModel> {\r\n    return this.http.get<UserDataModel>(this.baseUrl + \"/api/User\", {\r\n      headers: new HttpHeaders().set(\"Authorization\", \"Bearer \" + localStorage.getItem(TOKEN))\r\n    });\r\n  }\r\n  /**\r\n   * Reads user data from \"localStorage\"\r\n   * @returns UserDataModel or null\r\n  */\r\n  public getLocalUserDate() : UserDataModel|null{\r\n    var json_data = localStorage.getItem(USER_DATA)\r\n    if(json_data != null){\r\n      var userSubject = new BehaviorSubject<UserDataModel>(JSON.parse(json_data));\r\n      return userSubject.value;\r\n    }else{\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove all dates from \"localStorage\".\r\n   */\r\n  public signOut() {\r\n    localStorage.clear();\r\n    window.location.replace(\"/\");\r\n  }\r\n\r\n  /**\r\n   * Checks for the presence of a token.\r\n   * @returns true if the token exists, or false if the token does not exist.\r\n   */\r\n  public hasToken(): boolean {\r\n    var token = localStorage.getItem(TOKEN);\r\n    if (token != null) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Store the token and the expired in \"localStorage\".\r\n   * @param token \r\n   * @param expration \r\n   */\r\n  public saveToken(token: string, expration: string) {\r\n    localStorage.setItem(TOKEN, token);\r\n    localStorage.setItem(EXPRARTION_TOKEN, expration);\r\n  }\r\n\r\n  /**\r\n   * Stores user data in \"localStorage\"\r\n   * @param user - user data\r\n   */\r\n  public saveUserData(user: UserDataModel){\r\n    localStorage.setItem(USER_DATA, JSON.stringify(user));\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @returns HttpHeaders with Authorization Token\r\n   */\r\n  public getHeadersWithToken(): HttpHeaders{\r\n    return new HttpHeaders().set(\"Authorization\", \"Bearer \" + localStorage.getItem(TOKEN))\r\n  }\r\n\r\n  public getUserFromLocalStorage(): UserDataModel | null{\r\n\r\n    var jsonObj = localStorage.getItem(USER_DATA);\r\n\r\n    if(jsonObj == null) return null;\r\n\r\n    var result = Object.assign(new UserDataModel, jsonObj);\r\n\r\n    return result;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}