{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nlet RegisterPageComponent = class RegisterPageComponent {\n  constructor(auth, formBuilder, router) {\n    this.auth = auth;\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.styleContainer = \"container\";\n    this.defaultRole = 'client';\n    this.redirectSuccess = true;\n    this.header = \"Create An Account\";\n    this.showLinkToLogin = true;\n    this.resultEmitter = new EventEmitter();\n    this.mForm = new FormGroup({});\n    this.lastErrorMessage = \"\";\n    this.mForm = formBuilder.group({\n      email: new FormControl('', [Validators.required, Validators.email]),\n      userName: new FormControl('', [Validators.required, Validators.maxLength(100), Validators.minLength(4)]),\n      userSurname: new FormControl('', [Validators.required, Validators.maxLength(100), Validators.minLength(4)]),\n      password: new FormControl('', [Validators.required, Validators.minLength(6)]),\n      confirmPassword: new FormControl('', [Validators.required]),\n      role: new FormControl(this.defaultRole, [Validators.required])\n    }, {\n      validator: CompareValidator(\"password\", \"confirmPassword\")\n    });\n  }\n  ngOnInit() {\n    if (this.defaultRole != '') this.mForm.controls['role'].setValue(this.defaultRole);\n  }\n  onSubmit() {\n    if (this.defaultRole == \"own_company\") this.registerOwnCompany();else if (this.defaultRole == \"manager\" || this.defaultRole == \"worker\") this.registerWorker();else this.registerNormalPeople();\n  }\n  registerNormalPeople() {\n    if (!this.mForm.valid) {\n      console.log(\"Error!\");\n      console.log(this.mForm);\n    } else {\n      this.auth.register(this.mForm.value).subscribe(result => {\n        console.log(result);\n        this.mForm.reset();\n        if (this.redirectSuccess) this.router.navigate([\"login\"]);\n      }, error => {\n        console.log(error);\n        this.lastErrorMessage = error.error;\n      });\n    }\n  }\n  registerOwnCompany() {\n    var requst = this.auth.registerOwnCompany(this.mForm.value);\n    if (requst == null) alert(\"What are you doing here?\");else {\n      requst.subscribe(result => {\n        this.resultEmitter.emit(result);\n        this.mForm.reset();\n      }, error => {\n        this.lastErrorMessage = error.error;\n      });\n    }\n  }\n  registerWorker() {\n    var requst = this.auth.registerWorker(this.mForm.value);\n    if (requst == null) alert(\"What are you doing here?\");else {\n      requst.subscribe(result => {\n        this.resultEmitter.emit(result);\n        this.mForm.reset();\n      }, error => {\n        this.lastErrorMessage = error.error;\n      });\n    }\n  }\n};\n__decorate([Input()], RegisterPageComponent.prototype, \"styleContainer\", void 0);\n__decorate([Input()], RegisterPageComponent.prototype, \"defaultRole\", void 0);\n__decorate([Input()], RegisterPageComponent.prototype, \"redirectSuccess\", void 0);\n__decorate([Input()], RegisterPageComponent.prototype, \"header\", void 0);\n__decorate([Input()], RegisterPageComponent.prototype, \"showLinkToLogin\", void 0);\n__decorate([Output()], RegisterPageComponent.prototype, \"resultEmitter\", void 0);\nRegisterPageComponent = __decorate([Component({\n  selector: 'app-register-page',\n  templateUrl: './register-page.component.html',\n  styleUrls: ['./register-page.component.css']\n})], RegisterPageComponent);\nexport { RegisterPageComponent };","map":{"version":3,"mappings":"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","names":["Component","EventEmitter","Input","Output","FormControl","FormGroup","Validators","RegisterPageComponent","constructor","auth","formBuilder","router","mForm","group","email","required","userName","maxLength","minLength","userSurname","password","confirmPassword","role","defaultRole","validator","CompareValidator","ngOnInit","controls","setValue","onSubmit","registerOwnCompany","registerWorker","registerNormalPeople","valid","console","log","register","value","subscribe","result","reset","redirectSuccess","navigate","error","lastErrorMessage","requst","alert","resultEmitter","emit","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\chizh\\source\\repos\\WebBeautyBook\\WebBeautyBook\\ClientApp\\src\\app\\auth\\register-page\\register-page.component.ts"],"sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-register-page',\n  templateUrl: './register-page.component.html',\n  styleUrls: ['./register-page.component.css']\n})\nexport class RegisterPageComponent implements OnInit {\n\n  @Input() styleContainer : \"container-fluid\" | \"container\" = \"container\"\n  @Input() defaultRole: string = 'client';\n  @Input() redirectSuccess = true;\n  @Input() header:string = \"Create An Account\";\n  @Input() showLinkToLogin: boolean = true;\n\n  @Output() resultEmitter = new EventEmitter<UserDataModel>();\n\n  mForm: FormGroup = new FormGroup({});\n  lastErrorMessage: string = \"\";\n\n  constructor(private auth: AuthService, private formBuilder: FormBuilder, private router: Router)\n  {\n    this.mForm = formBuilder.group({\n      email: new FormControl('', [Validators.required, Validators.email]),\n      userName: new FormControl('', [Validators.required, Validators.maxLength(100), Validators.minLength(4)]),\n      userSurname: new FormControl('', [Validators.required, Validators.maxLength(100), Validators.minLength(4)]),\n      password: new FormControl('', [Validators.required, Validators.minLength(6)]),\n      confirmPassword: new FormControl('', [Validators.required]),\n      role: new FormControl(this.defaultRole, [Validators.required])\n    }, {\n      validator: CompareValidator(\"password\", \"confirmPassword\")\n    });\n  }\n  \n\n  ngOnInit(): void {\n    if(this.defaultRole != '') this.mForm.controls['role'].setValue(this.defaultRole);\n  }\n\n  onSubmit() {\n    if(this.defaultRole == \"own_company\") this.registerOwnCompany();\n    else if(this.defaultRole == \"manager\" || this.defaultRole == \"worker\") this.registerWorker();\n    else this.registerNormalPeople();\n  }\n\n  private registerNormalPeople(){\n    if (!this.mForm.valid) {\n      console.log(\"Error!\");\n      console.log(this.mForm);\n    } else {\n      this.auth.register(this.mForm.value)\n        .subscribe(result => {\n          console.log(result);\n          this.mForm.reset();\n          if(this.redirectSuccess) this.router.navigate([\"login\"]);\n        }, error => {\n          console.log(error);\n          this.lastErrorMessage = error.error;\n        }); \n    }\n  }\n\n  private registerOwnCompany(){\n    var requst = this.auth.registerOwnCompany(this.mForm.value);\n    if(requst == null) alert(\"What are you doing here?\");\n    else{\n      requst.subscribe(\n        result => {\n          this.resultEmitter.emit(result);\n          this.mForm.reset();\n        }, error => {\n          this.lastErrorMessage = error.error;\n        }\n      );\n    }\n  }\n\n  private registerWorker(){\n    var requst = this.auth.registerWorker(this.mForm.value);\n    if(requst == null) alert(\"What are you doing here?\");\n    else{\n      requst.subscribe(\n        result => {\n          this.resultEmitter.emit(result);\n          this.mForm.reset();\n        }, error => {\n          this.lastErrorMessage = error.error;\n        }\n      );\n    }\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}